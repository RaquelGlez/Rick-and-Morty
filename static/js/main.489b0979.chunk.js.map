{"version":3,"sources":["components/Header.js","components/AbstractCharacter.js","components/CharacterData.js","components/DetailCharacter.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","withRouter","props","statusLife","history","console","log","status","key","id","src","image","alt","style","filter","name","onClick","push","CharacterData","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","isLoading","error","_this2","setState","axios","get","then","result","data","results","catch","map","item","components_AbstractCharacter","Component","DetailCharacter","species","type","gender","origin","goBack","App","BrowserRouter","basename","process","components_Header","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.489b0979.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\n\r\nconst Header = () => {\r\n    \r\n    return (\r\n      <div className=\"header my-4\">\r\n        <h3>Rick and Morty</h3>\r\n        <p className=\"pt-2 pb-4\">Sus personajes</p>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Header;","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\n\r\n\r\n\r\nconst AbstractCharacter = (props) => {\r\n const { history } = props;\r\n  console.log(props)\r\n \r\n  \r\n\r\n  let statusLife;\r\n  props.status !== \"Alive\" ? statusLife = \"1\": statusLife = \"0\"\r\n  \r\n      return (\r\n        \r\n          <div key={props.id} className=\"card my-2 mx-2\"> \r\n            <div  className=\"card-body\">\r\n              <img src={props.image} className=\"card-img-top\" alt=\"imagen-personaje\" style={{filter: \"grayscale(\"+statusLife+\")\"}} />\r\n              <h6 className=\"card-title pt-3\">Nombre: {props.name}</h6>\r\n              <p className=\"card-text\">Id: {props.id}</p>\r\n              <button className=\"btn btn-info\" onClick={() => history.push('/character/'+props.id)} >Ver m√°s</button>\r\n\r\n            </div>\r\n          </div> \r\n          \r\n      );  \r\n  }\r\n  \r\n  export default withRouter(AbstractCharacter);\r\n  ","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport AbstractCharacter from './AbstractCharacter'\r\nimport '../App.css';\r\n\r\n\r\nconst API = 'https://rickandmortyapi.com/api/character/?page=1';\r\n\r\nclass CharacterData extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n      this.state = {\r\n        items: [],\r\n        isLoading: false,\r\n        error: null, \r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.setState({ isLoading: true });\r\n  \r\n      axios.get(API)\r\n        .then(result => this.setState({\r\n          items: result.data.results,\r\n          isLoading: false\r\n        }))\r\n        .catch(error => this.setState({\r\n          error,\r\n          isLoading: false\r\n        }));\r\n    }\r\n  \r\n    render() {\r\n    \r\n      const { items } = this.state;\r\n      console.log(items)\r\n      \r\n     \r\n      return (\r\n        \r\n        <div>\r\n          <div className=\"container\" >\r\n            {\r\n              items.map(item => (\r\n                <AbstractCharacter\r\n                  key = {item.id} \r\n                  id = {item.id} \r\n                  name = {item.name} \r\n                  image = {item.image} \r\n                  status = {item.status}\r\n                  />\r\n                 )\r\n                )\r\n              }\r\n            </div>\r\n        </div>\r\n      );  \r\n    }  \r\n  }\r\n  \r\n  export default CharacterData;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withRouter } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\n\r\nconst API = 'https://rickandmortyapi.com/api/character/?page=1';\r\n\r\nclass DetailCharacter extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      \r\n      this.state = {\r\n        items: [],\r\n        isLoading: false,\r\n        error: null, \r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.setState({ isLoading: true });\r\n  \r\n      axios.get(API)\r\n        .then(result => this.setState({\r\n          items: result.data.results,\r\n          isLoading: false\r\n        }))\r\n        .catch(error => this.setState({\r\n          error,\r\n          isLoading: false\r\n        }));\r\n    }\r\n\r\n    \r\n  \r\n    render() {\r\n      const { history } = this.props\r\n      const { items } = this.state;      \r\n      \r\n      return (\r\n      \r\n        <div className= \"container\">\r\n            {items.map(item =>\r\n            <div key={item.id} className=\"card my-2 mx-2\"> \r\n              <div  className=\"card-body\">\r\n                <img src={item.image} className=\"card-img-top\" alt=\"imagen-personaje\"  />\r\n                <h6 className=\"card-title pt-3\">Nombre: {item.name}</h6>\r\n                <p className=\"card-text\">Id: {item.id}</p>\r\n                <p className=\"card-text\">Status: {item.status}</p>\r\n                <p className=\"card-text\">Specie: {item.species}</p>\r\n                <p className=\"card-text\">Tipo: {item.type}</p>\r\n                <p className=\"card-text\">Gender: {item.gender}</p> \r\n                <p className=\"card-text\">Origin-Name: {item.origin.name}</p>\r\n              </div>\r\n              <button className=\"btn btn-info\" onClick={() => history.goBack()} >Regresar</button>\r\n            </div>\r\n            )}      \r\n        </div>\r\n\r\n      );    \r\n    }  \r\n  }\r\n  \r\n  export default withRouter(DetailCharacter);","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport Header from './components/Header'\nimport CharacterData from './components/CharacterData'\n//import AbstractCharacter from './components/AbstractCharacter'\nimport DetailCharacter from './components/DetailCharacter'\n//import './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter basename = { process.env.PUBLIC_URL } >\n        <div className=\"App\">\n          <Header/>\n          <Route exact path = '/' component = { CharacterData }/>\n          <Route exact path = '/character/:id' component = { DetailCharacter}/>\n        </div>\n      </BrowserRouter>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}